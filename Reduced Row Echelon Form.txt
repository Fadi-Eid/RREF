#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <conio.h>

void read_MN(int*M, int*N);
//read a matrix:
void read_matrix(double** Mat, int M, int N);
//free matrix:
void free_matrix(double** Mat, int M, int N);
//print matrix:
void print_matrix(double** Mat, int M, int N);
//find last row:
int find_last_row(double** Mat, int M, int N);
//flip zeros row
int flip_zeros(double** Mat, int M, int N, int current);
//reduced row echelon form
void rref(double** Mat, int M, int N);

int main()
{
    double **Mat;
    int M, N;

    read_MN(&M, &N);

    int i;

    Mat = (double**)malloc(M*sizeof(double));
    for(i=0; i<M; i++)
        Mat[i] = (double*)malloc(N*sizeof(double));

    read_matrix(Mat, M, N);
    print_matrix(Mat, M, N);
    rref(Mat, M, N);
    printf("Final Version: \n");
    print_matrix(Mat, M, N);
    free_matrix(Mat, M, N);
    return 0;
}


//read rows and columns of the matrix:
void read_MN(int*M, int*N)
{
    int m, n;
    printf("Rows: ");
    scanf("%d", &m);
    printf("columns: ");
    scanf("%d", &n);
    *M = m;
    *N = n;
    return;
}

int find_last_row(double** Mat, int M, int N)
{
    int last = M-1;
    int i, j;
    int count = 0;
    for(i=M-1; i>=0; i--)
    {
        count=0;
        for(j=0; j<N; j++)
        {
            if(Mat[i][j]==0) count++;
            else break;
        }
        if(count==N)
            last = last-1;
        else break;
    }
    return last;
}

int flip_zeros(double** Mat, int M, int N, int current)
{
    int i;
    double* vector;
    int count=0;
    int last;

    for(i=0; i<N; i++)
    {
        if(Mat[current][i]==0) count++;
        else break;
    }
    if (count==N)
    {
        vector = (double*)malloc(N*sizeof(double));
        //do the flipping:
        last = find_last_row(Mat, M , N);
        if(last>current)
        {
            for(i=0; i<N; i++)
            {
                vector[i] = Mat[last][i];
                Mat[last][i] = Mat[current][i];
                Mat[current][i] = vector[i];
            }
            free(vector);
            return 1;
        }
    }
    return 0;
}

void rref(double** Mat, int M, int N)
{
    int i, j;
    int ij;
    int l;
    int piv_col;
    double pivot, factor;
    int zeros;
    double* vector;
    vector = (double*)malloc(N*sizeof(double));


    //number of pivots:
    if(M<N)
        ij=M;
    else ij=N;

    //go through all the pivots:
    for(i=0; i<ij; i++)
    {
        //find the pivot column
        for(l=0; l<N; l++)
            if(Mat[i][l]!=0)
            {
                piv_col = l;
                break;
            }
        //if there is no pivot, put the entire row at the end
        if(Mat[i][piv_col]==0)
        {
            zeros = flip_zeros(Mat, M, N, i);
            if(zeros==1) i--;
            continue;
        }
        //iterate through the elements above the pivot:

        for(l=0; l<i; l++)
        {
            factor = Mat[l][piv_col];
            pivot=Mat[i][piv_col];
            if((factor==0)||(pivot==0)) continue;
            if(factor>pivot)
            {
                if( ((int)(factor/pivot)==(factor/pivot)))
                   {
                       factor=factor/pivot;
                       pivot=1;
                   }
            }
            else if(factor<pivot)
            {
                if( (int)(pivot/factor)==(pivot/factor) )
                {
                    pivot= pivot/factor;
                    factor=1;
                }
            }
            else
            {
                factor=1;
                pivot = 1;
            }


            for(j=0; j<N; j++)
            {
                vector[j] = Mat[i][j];
                vector[j] *= factor;
                Mat[l][j] *= pivot;
                Mat[l][j] -= vector[j];
            }
        }

        //iterate through all the elements below:

        for(l = i+1; l<M; l++)
        {
            factor = Mat[l][piv_col];
            pivot = Mat[i][piv_col];

            if((factor==0)||(pivot==0)) continue;
            if(factor>pivot)
            {
                if( ((int)(factor/pivot)==(factor/pivot)))
                   {
                       factor=factor/pivot;
                       pivot=1;
                   }
            }
            else if(factor<pivot)
            {
                if( (int)(pivot/factor)==(pivot/factor) )
                {
                    pivot = pivot/factor;
                    factor=1;
                }
            }
            else
            {
                factor=1;
                pivot = 1;
            }

            for(j=0; j<N; j++)
            {
                Mat[i][j] *= factor;
                Mat[l][j] *= pivot;
                Mat[l][j] -= Mat[i][j];
            }
            //flip the row it=f it's all zeros
            zeros = flip_zeros(Mat, M, N, l);
            if(zeros==1) l--;
        }

    }


    //make unit:
    for(i=0; i<ij; i++)
    {
        //locate pivot:
        for(l=0; l<N; l++)
            if(Mat[i][l]!=0)
            {
                piv_col = l;
                break;
            }
        pivot = Mat[i][piv_col];
        if(pivot==0) break;
        for(l=0; l<N; l++)
        {
            Mat[i][l] = Mat[i][l]/pivot;
        }

    }


    int prev_piv_col=0;
    //sort pivots:
    for(i=0; i<ij; i++)
    {
        //locate pivot:
        for(l=0; l<N; l++)
            if(Mat[i][l]!=0)
            {
                piv_col = l;
                break;
            }
        if(piv_col<prev_piv_col)
        {            for(l=0; l<N; l++)
            {
                vector[l] = Mat[i][l];
                Mat[i][l] = Mat[i-1][l];
                Mat[i-1][l] = vector[l];
            }

        }
        prev_piv_col = piv_col;
    }
    free(vector);
    return;
}

//read a matrix:
void read_matrix(double** Mat, int M, int N)
{
    int i, j;

    for(i=0; i<M; i++)
    {
        for(j=0; j<N; j++)
        {
            printf("A[%d][%d] = ", i, j);
            scanf("%lf", &Mat[i][j]);
        }
        printf("_______\n");
    }
    return;
}

//free matrix
void free_matrix(double** Mat, int M, int N)
{
    int i;
    for(i=0; i<M; i++)
        free(Mat[i]);
    free(Mat);
}

//print matrix:
void print_matrix(double** Mat, int M, int N)
{
    int i, j;
    for(i=0; i<M; i++)
    {
        for(j=0; j<N; j++)
            printf("%.3lf\t",Mat[i][j]);
        printf("|\n");
    }
    printf("____________________________________________________\n\n\n");
    return;
}
